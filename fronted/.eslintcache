[{"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\index.js":"1","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reportWebVitals.js":"2","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\App.js":"3","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\LoginScreen.js":"4","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Loader.js":"5","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Message.js":"6","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\FormContainer.js":"7","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\store.js":"8","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\userReducers.js":"9","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\userConstants.js":"10","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\userActions.js":"11","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\RegisterScreen.js":"12","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Header.js":"13","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\HomeScreen.js":"14","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\SubmitShiftsScreen.js":"15","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\submittedShiftsReducer.js":"16","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\submittedShiftsConstants.js":"17","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\submitShiftsActions.js":"18","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\ShiftsPanelScreen.js":"19","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\TeamMaker.js":"20","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\workerTeamsConstants.js":"21","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\workerTeamsReducer.js":"22","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ShiftsMaker.js":"23","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\dateDaysReducers.js":"24","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\dateDaysConstants.js":"25","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\dateDaysActions.js":"26","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\scheduleActions.js":"27","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\scheduleConstants.js":"28","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\scheduleReducers.js":"29","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ShiftsCount.js":"30","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Paginate.js":"31","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Sidebar.js":"32","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\UserEditScreen.js":"33","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\newUserForm.js":"34","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\NewUserForm.js":"35","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\MyShiftsScreen.js":"36","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\DemoAlert.js":"37","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ThemeModeButton.js":"38","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\themeReducers.js":"39","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\themeConstants.js":"40","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\DisableSubmittingButton.js":"41","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\AllOptions.js":"42"},{"size":597,"mtime":1607379995273,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"44"},{"size":1400,"mtime":1612003760226,"results":"46","hashOfConfig":"44"},{"size":2677,"mtime":1618656590097,"results":"47","hashOfConfig":"44"},{"size":347,"mtime":1612495214000,"results":"48","hashOfConfig":"44"},{"size":277,"mtime":1612495214000,"results":"49","hashOfConfig":"44"},{"size":411,"mtime":1612495214000,"results":"50","hashOfConfig":"44"},{"size":2640,"mtime":1612095876529,"results":"51","hashOfConfig":"44"},{"size":3768,"mtime":1610983228325,"results":"52","hashOfConfig":"44"},{"size":1532,"mtime":1607737853205,"results":"53","hashOfConfig":"44"},{"size":6449,"mtime":1611994844280,"results":"54","hashOfConfig":"44"},{"size":3619,"mtime":1618132227156,"results":"55","hashOfConfig":"44"},{"size":2513,"mtime":1618656486259,"results":"56","hashOfConfig":"44"},{"size":5771,"mtime":1612495214000,"results":"57","hashOfConfig":"44"},{"size":5918,"mtime":1618656441756,"results":"58","hashOfConfig":"44"},{"size":2416,"mtime":1610620948209,"results":"59","hashOfConfig":"44"},{"size":1019,"mtime":1610619911629,"results":"60","hashOfConfig":"44"},{"size":4267,"mtime":1611629738069,"results":"61","hashOfConfig":"44"},{"size":717,"mtime":1618132443702,"results":"62","hashOfConfig":"44"},{"size":4913,"mtime":1618133415145,"results":"63","hashOfConfig":"44"},{"size":262,"mtime":1608688735995,"results":"64","hashOfConfig":"44"},{"size":464,"mtime":1609954022075,"results":"65","hashOfConfig":"44"},{"size":16286,"mtime":1618656685459,"results":"66","hashOfConfig":"44"},{"size":1184,"mtime":1612094465826,"results":"67","hashOfConfig":"44"},{"size":690,"mtime":1612091859547,"results":"68","hashOfConfig":"44"},{"size":3771,"mtime":1612093488922,"results":"69","hashOfConfig":"44"},{"size":5511,"mtime":1611386867393,"results":"70","hashOfConfig":"44"},{"size":1466,"mtime":1610782337675,"results":"71","hashOfConfig":"44"},{"size":3755,"mtime":1610796160855,"results":"72","hashOfConfig":"44"},{"size":1434,"mtime":1612495214000,"results":"73","hashOfConfig":"44"},{"size":528,"mtime":1612495214000,"results":"74","hashOfConfig":"44"},{"size":2912,"mtime":1612495214000,"results":"75","hashOfConfig":"44"},{"size":4604,"mtime":1618660981183,"results":"76","hashOfConfig":"44"},{"size":3488,"mtime":1610988326737,"results":"77","hashOfConfig":"44"},{"size":3811,"mtime":1618661348752,"results":"78","hashOfConfig":"44"},{"size":4208,"mtime":1618656349123,"results":"79","hashOfConfig":"44"},{"size":513,"mtime":1618132873447,"results":"80","hashOfConfig":"44"},{"size":845,"mtime":1612495214000,"results":"81","hashOfConfig":"44"},{"size":373,"mtime":1612002193837,"results":"82","hashOfConfig":"44"},{"size":54,"mtime":1612002177972,"results":"83","hashOfConfig":"44"},{"size":905,"mtime":1612495214000,"results":"84","hashOfConfig":"44"},{"size":1012,"mtime":1618660302538,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"cmzju7",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"88"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"88"},"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\index.js",[],["186","187"],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reportWebVitals.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\App.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\LoginScreen.js",["188","189","190","191"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { login } from '../actions/userActions';\nimport FormContainer from '../components/FormContainer';\nimport {Button,Typography,TextField} from '@material-ui/core';\n\nconst LoginScreen = ({ history, location }) => {\n  \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const dispatch = useDispatch();\n    const userLogin = useSelector(state => state.userLogin);\n    const { error, loading, userInfo } = userLogin;\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n\n    return (\n        <div className='rtl right'>\n            <FormContainer className='rtl right'>\n            <Typography variant=\"h3\" component=\"h2\">\n            התחבר\n            </Typography>\n                <h1></h1>\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && < Loader />}\n                <Form onSubmit={submitHandler}>\n                    <Form.Group controlId='email'>\n                    <Typography variant=\"h5\" component=\"h4\">\n                    כתובת מייל\n                    </Typography>\n                    <TextField id=\"outlined-basic\" label=\"הכנס כתובת אימייל\" variant=\"outlined\" value={email} onChange={(e) => { setEmail(e.target.value) }}style={{backgroundColor: 'white',width:'350px'}} />\n                        \n                    </Form.Group>\n                    <Form.Group controlId='password'>\n                    <Typography variant=\"h5\" component=\"h4\">\n                    סיסמה \n                    </Typography>\n                    <TextField id=\"outlined-basic\" label='הכנס סיסמה' type='password' variant=\"outlined\" value={password} onChange={(e) => { setPassword(e.target.value) }} style={{backgroundColor: 'white',width:'350px'}}/>    \n                       \n                    </Form.Group>\n                    <Button onClick={submitHandler} variant=\"contained\" color=\"primary\">\n                    התחבר\n                    </Button>\n                    \n                </Form>\n            </FormContainer>\n        </div>\n    )\n}\n\nexport default LoginScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Loader.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Message.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\FormContainer.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\store.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\userReducers.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\userConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\userActions.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\RegisterScreen.js",["192"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form,  Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { register } from '../actions/userActions';\nimport FormContainer from '../components/FormContainer';\nimport {Button,Typography,TextField} from '@material-ui/core';\n\nconst RegisterScreen = ({ location, history }) => {\n    const [email, setEmail] = useState('');\n    const [name, setName] = useState('');\n    const [password, setPassword] = useState('');\n    const [coniformPassword, setConiformPassword] = useState('');\n    const [message, setMessage] = useState(null);\n\n    const dispatch = useDispatch();\n    const userRegister = useSelector(state => state.userRegister);\n    const { error, loading, userInfo } = userRegister;\n\n    const redirect = location.search ? location.search.split('=')[1] : '/';\n\n    useEffect(() => {\n        if (userInfo) {\n            history.push(redirect)\n        }\n    }, [history, userInfo, redirect])\n\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        if (password !== coniformPassword) {\n            setMessage('Passwords do not match')\n        } else {\n            dispatch(register(name, email, password))\n        }\n    };\n\n\n    return (\n        <FormContainer>\n            <Typography variant=\"h3\" component=\"h2\">\n            SIGN UP\n            </Typography>\n            <br></br>\n            {message && <Message variant='danger'>{message}</Message>}\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && < Loader />}\n            <Form onSubmit={submitHandler}>\n                <Form.Group controlId='name'>\n                <TextField id=\"outlined-basic\" label=\"Enter name\" variant=\"outlined\" value={name} onChange={(e) => setName(e.target.value)} style={{backgroundColor:'white',width:'350px'}}/>\n                    \n                </Form.Group>\n                <Form.Group controlId='email'>\n                <TextField id=\"outlined-basic\" label=\"Email Adress\" variant=\"outlined\" value={email} onChange={(e) => setEmail(e.target.value)} style={{backgroundColor:'white',width:'350px'}}/>\n                   \n                </Form.Group>\n                <Form.Group controlId='password'>\n                <TextField id=\"outlined-basic\" label=\"Your Password\" variant=\"outlined\" value={password} onChange={(e) => setPassword(e.target.value)} style={{backgroundColor:'white',width:'350px'}}/>\n                    \n                </Form.Group>\n                <Form.Group controlId='coniformPassword'>\n                <TextField id=\"outlined-basic\" label=\"Coniform Password\" variant=\"outlined\" value={coniformPassword} onChange={(e) => setConiformPassword(e.target.value)} style={{backgroundColor:'white',width:'350px'}}/>\n                   \n                </Form.Group>\n                <Button variant=\"contained\" color=\"primary\" type='submit'>\n                Register\n                    </Button>\n               \n            </Form>\n            <Row className=\"py-3\">\n            <Typography variant=\"h6\" component=\"h7\" style={{color:\"black\",marginLeft:'18px'}}>\n            Already got a user? <Button variant=\"contained\" color=\"primary\" type='submit' style={{color:'white'}}>\n            <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>Login</Link> \n                    </Button>\n            </Typography>\n             \n            </Row>\n        </FormContainer>\n    )\n}\n\nexport default RegisterScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Header.js",["193","194","195"],"import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../actions/userActions';\nimport Sidebar from './Sidebar.js';\nimport {\n    Navbar, Nav, Container,\n} from 'react-bootstrap';\nimport {Button,Typography,TextField} from '@material-ui/core';\nimport ThemeModeButton from './ThemeModeButton';\n\nconst Header = () => {\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin\n\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n    const dispatch = useDispatch()\n\n  \n\n    const logoutHandler = () => {\n        dispatch(logout())\n    }\n    return (\n        <header className={`header ${isDark?'':'light-header'}`}>\n            <Navbar className={`header ${isDark?'':'light-header'}`}   >\n                        <ThemeModeButton/>\n                        <img className='header-img' src={'/header2.png'}/> \n                <Container>\n                    <LinkContainer to='/'>\n                        <Navbar.Brand ></Navbar.Brand> \n                    </LinkContainer>\n\n                    {/* <Navbar.Toggle aria-controls=\"basic-navbar-nav\" /> */}\n                    {/* <Navbar.Collapse id=\"basic-navbar-nav\"> */}\n                        <Nav className=\"ml-auto\">\n                            {userInfo && (\n                                 <Button onClick={logoutHandler} variant=\"contained\" color=\"primary\" >\n                                 התנתק\n                                 </Button>\n                               \n                            )}\n\n                            {userInfo && (<Navbar.Text  className='mr-2' style={{ 'display': 'flex' }}>\n                                <span style={{ 'margin': 'auto' }}> {userInfo.name}</span>\n                            </Navbar.Text>\n                            )}\n\n                            {!userInfo && <LinkContainer to='/login'>\n                                <Nav.Link > <Button variant=\"contained\" color=\"primary\" >\n                                \n                                 התחבר\n                                 <i className='fas fa-user pl-2'></i> </Button></Nav.Link>\n                            </LinkContainer>}\n\n                        </Nav>\n\n                    {/* </Navbar.Collapse> */}\n                </Container>\n                \n                <Sidebar />\n\n            </Navbar >\n        </header >\n    )\n}\n\nexport default Header\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\HomeScreen.js",["196","197"],"import React, { useEffect } from 'react';\nimport { Table, Row, Button } from 'react-bootstrap'\nimport { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport uuid from 'react-uuid'\nimport { getAllSchedulesAction } from '../actions/scheduleActions';\nimport Paginate from '../components/Paginate';\n\n\nconst HomeScreen = ({ match }) => {\n    \n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n\n    const month = new Date().getMonth()\n    const year = new Date().getFullYear()\n    const pageNumber = match.params.pageNumber || 1\n\n    const dispatch = useDispatch()\n\n    const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת']\n    const setDay = (dayNumber) => {\n        if (schedules[0]) {\n            const dayWord = new Date(Number(new Date(schedules[0].date).getFullYear()), Number(new Date(schedules[0].date).getMonth()), Number(dayNumber)).getDay()\n            return days[dayWord]\n        } else return null\n    }\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n\n    const getSchedules = useSelector(state => state.getSchedules);\n    const { schedules, pages, page } = getSchedules;\n\n    const downloadJson = (objectData) => {\n        let filename = \"export.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\n            navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n            var a = document.createElement('a');\n            a.download = filename;\n            a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(objectData));\n            a.target = '_blank';\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n        }\n    }\n\n    useEffect(() => {\n        dispatch(getAllSchedulesAction(pageNumber))\n    }, [dispatch, pageNumber])\n\n\n    return (\n        <>\n            <Row style={{ 'direction': 'rtl' }}>\n                <Link\n                    className='btn btn-primary my-3'\n                    to={userInfo ? '/myshifts' : '/login?redirect=myshifts'}>\n                    המשמרות שלי\n                    </Link>\n                <Link\n                    className={`btn my-3 btn-success ${isDark?'':'btn-success-light'}`}\n                    to={userInfo ? '/submitshifts' : '/login?redirect=submitshifts'}>\n                    הגשת משמרות\n                    </Link>\n            </Row>\n            <Table className=\"right\" striped bordered hover responsive size=\"sm\" variant={isDark?'dark':'light'}>\n                <thead>\n                    <tr>\n                        <th>רענון</th>\n                        <th>  22:00-6:00</th>\n                        <th>משמרת לילה </th>\n                        <th>  14:00-22:00</th>\n                        <th>משמרת צהריים </th>\n                        <th>  06:00-14:00:00</th>\n                        <th>משמרת בוקר </th>\n                        <th>תאריך</th>\n                        <th>יום בשבוע</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td></td>\n                            <td>מאבטח 2</td>\n                            <td>אחמ\"ש</td>\n                            <td>מאבטח 2</td>\n                            <td>אחמ\"ש</td>\n                            <td>מאבטח 2</td>\n                            <td>אחמ\"ש</td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    {schedules &&\n                        schedules[0].shifts.map((day, index) => (\n                            <tr key={uuid()}  >\n                                <td>\n                                    {day.trainings.map((p, index) => <p key={uuid()} className='m-0' style={{ 'display': 'block' }}>{index > 0 ? ',' : null} {p?p.split(' ')[0]:''}</p>)}\n                                </td>\n                                    <td>{day.evening[0]?day.evening[0].split(' ')[0]:''  || ''}</td>\n                                    <td>{day.evening[1]?day.evening[1].split(' ')[0]:''  || ''}</td>\n                                    <td>{day.afternoon[0]?day.afternoon[0].split(' ')[0]:'' || ''}</td>\n                                    <td>{day.afternoon[1]?day.afternoon[1].split(' ')[0]:'' || ''}</td>\n                                    <td>{day.morning[0]?day.morning[0].split(' ')[0]:'' || ''}</td>\n                                    <td>{day.morning[1]?day.morning[1].split(' ')[0]:'' || ''}</td>\n                                <td>{`${new Date(schedules[0].date).getDate() + index}/${new Date(schedules[0].date).getMonth() + 1}/${new Date(schedules[0].date).getFullYear()}`}</td>\n                                <td className={\n                                setDay(new Date(schedules[0].date).getDate() + index)==='שישי' ||  setDay(new Date(schedules[0].date).getDate() + index)==='שבת'?\n                                isDark?'green':'light-green':''\n                            }>{setDay(new Date(schedules[0].date).getDate() + index)}</td>\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </Table>\n            {(userInfo && userInfo.isAdmin) && <Button className='m-3' onClick={() => downloadJson(schedules[0].shifts)}>הורד סידור</Button>}\n            <Paginate pages={pages} page={page} />\n\n        </>\n    )\n}\n\nexport default HomeScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\SubmitShiftsScreen.js",["198"],"import React, { useEffect, useState } from 'react'\nimport { Table, Form, Alert, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { submitShiftsAction, updateSubmittedShiftsAction } from '../actions/submitShiftsActions.js'\nimport { getDateDaysAction } from '../actions/dateDaysActions';\nimport DemoAlert from '../components/DemoAlert.js';\nimport { Link } from 'react-router-dom';\nimport { Button, Typography, TextField } from '@material-ui/core';\n\n\n\nconst SubmitShiftsScreen = ({ history }) => {\n\n    const dispatch = useDispatch();\n\n    const [showAlert, setShowAlert] = useState(false)\n    const [showDemoAlert, setShowDemoAlert] = useState(false)\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const shiftsDateDays = useSelector(state => state.shiftsDateDays)\n    const { date, daysAmount, disableSubmitting } = shiftsDateDays\n\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n\n    const getOneSubmittedShiftsByDate = useSelector(state => state.getOneSubmittedShiftsByDate)\n    const { submittedShiftsByDate } = getOneSubmittedShiftsByDate\n\n    let submittedShiftsArray = []\n\n\n    if (!submittedShiftsByDate) {\n        if (date) {\n            let startingDate = new Date(date)\n            for (let i = 0; i < daysAmount; i++) {\n                let newDate = i === 0 ? new Date(startingDate.setDate(startingDate.getDate())) : new Date(startingDate.setDate(startingDate.getDate() + 1))\n                submittedShiftsArray.push(\n                    {\n                        date: newDate,\n                        submittedShift: 'הכול'\n                    }\n                )\n            }\n        }\n    } else {\n        submittedShiftsArray = submittedShiftsByDate.submittedShiftsArray\n    }\n\n    const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת']\n    const setDay = (dayNumber) => {\n        if (date) {\n            const dayWord = new Date(Number(new Date(date).getFullYear()), Number(new Date(date).getMonth()), Number(dayNumber)).getDay()\n            return days[dayWord]\n        } else return null\n    }\n\n\n    const setShifts = (e, index) => {\n        submittedShiftsArray[index].submittedShift = e.target.value\n    }\n\n    const submitForm = () => {\n        if (userInfo.name === 'demo') {\n            setShowDemoAlert(true)\n            setTimeout(() => setShowDemoAlert(false), 5000)\n            return\n        }\n\n        setShowAlert(true)\n        if (!submittedShiftsByDate) {\n            dispatch(submitShiftsAction({ date, submittedShiftsArray }))\n        } else {\n            dispatch(updateSubmittedShiftsAction({ date, submittedShiftsArray }))\n        }\n        setTimeout(() => {\n            setShowAlert(false)\n            history.push('/')\n        }, 2000)\n\n\n    }\n\n\n    useEffect(() => {\n        if (!date) {\n            dispatch(getDateDaysAction())\n        }\n\n    }, [dispatch, date])\n\n\n\n    const options = ['הכול', 'כלום', 'בוקר', 'צהריים', 'לילה', 'בוקר / צהריים', 'בוקר / לילה', 'צהריים / לילה']\n    return (\n        <>\n            {showDemoAlert && <DemoAlert />}\n            <Row style={{ 'direction': 'rtl' }}>\n                <Link\n                    className={'btn btn-primary my-3'}\n                    to='/'>\n                    דף הבית\n                </Link>\n            </Row>\n            { submittedShiftsArray && <Table className=\"right\" striped bordered hover responsive size=\"sm\" variant={isDark ? 'dark' : 'light'}>\n\n                <thead>\n                    <tr>\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"20px\" }}>משמרות</th>\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"20px\" }}>תאריך</th>\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"20px\" }}>יום</th>\n                    </tr>\n                </thead>\n                <tbody className='right'>\n                    {submittedShiftsArray.map((submittedShift, index) => (\n                        <tr className={\n                            setDay(new Date(date).getDate() + index) === 'שישי' || setDay(new Date(date).getDate() + index) === 'שבת' ?\n                                isDark ? 'green' : 'light-green' : ''\n                        } key={submittedShift.date}>\n                            <td>\n                                <Form.Control className='rtl' as='select' defaultValue={submittedShiftsArray[index].submittedShift} onChange={(e) => setShifts(e, index)}>\n                                    {options.map((option) => <option key={option} value={option}>{option} </option>)}\n                                </Form.Control>\n                            </td>\n                            <td>{`${new Date(submittedShift.date).getDate()}/${new Date(submittedShift.date).getMonth() + 1}`}</td>\n                            <td >{setDay(new Date(date).getDate() + index)}</td>\n                        </tr>\n                    ))}\n                </tbody>\n\n            </Table>}\n            {showAlert && <Alert className='flex right rtl' variant='success'>\n                <Typography variant=\"h5\" component=\"h4\">\n                    !!!המשמרות הוגשו בהצלחה\n                    </Typography>\n            </Alert>\n            }\n            {disableSubmitting && <Alert className='flex right rtl' variant='danger'>\n                <Typography variant=\"h5\" component=\"h4\">\n                    הזמן להגשת המשמרות פג\n                    </Typography>\n\n            </Alert>\n            }\n            <Button variant=\"contained\" color=\"primary\" size=\"lg\" block onClick={submitForm} disabled={disableSubmitting}>\n                הגש משמרות\n            </Button>\n\n        </>\n    )\n}\n\nexport default SubmitShiftsScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\submittedShiftsReducer.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\submittedShiftsConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\submitShiftsActions.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\ShiftsPanelScreen.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\TeamMaker.js",["199"],"import React, { useState, useEffect } from 'react'\nimport { Form, Modal,  ListGroup } from 'react-bootstrap'\nimport uuid from 'react-uuid'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UPDATE_WORKER_TEAMS } from '../constants/workerTeamsConstants.js'\nimport { listUsers } from '../actions/userActions.js';\nimport {Button,Typography,TextField} from '@material-ui/core';\nconst TeamMaker = () => {\n    const [show, setShow] = useState(false);\n    const [teamSize, setTeamSize] = useState(0)\n    let teamsArray = []\n\n    const dispatch = useDispatch()\n\n    const workersArray = ['אלי סבג', 'שי שלום', 'שי כהן', 'רומן יונטל', 'אלכס שווצוב', 'יואל רומר', 'דניאל אלון', 'גון אניק', 'יגאל לוי']\n\n    const userList = useSelector(state => state.userList)\n    const { users } = userList\n\n    const getAllSubmittedShiftsByDate = useSelector(state => state.getAllSubmittedShiftsByDate)\n    const { submittedShiftsByDate } = getAllSubmittedShiftsByDate\n\n\n    let mutableWorkersArray = [...workersArray]\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const updateMutableWorkersArray = (e, teamIndex, inTeamIndex) => {\n        if (teamsArray.findIndex(team => team.teamIndex === teamIndex && team.inTeamIndex === inTeamIndex) !== -1) {\n            teamsArray[teamsArray.findIndex(team => team.teamIndex === teamIndex && team.inTeamIndex === inTeamIndex)].name = e.target.value\n        } else {\n            teamsArray.push({ teamIndex, inTeamIndex, name: e.target.value })\n        }\n    }\n\n    const saveTeams = () => {\n        dispatch({ type: UPDATE_WORKER_TEAMS, payload: teamsArray })\n    }\n\n\n\n\n    useEffect(() => { \n        if (users && users.length === 0) {\n            dispatch(listUsers())\n        }\n    }, [dispatch,users])\n\n    return (\n        <>\n            <Button className='my-3' variant=\"primary\" onClick={handleShow}>\n                צוות עובדים\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                <Typography variant=\"h3\" component=\"h2\">\n                Modal heading\n            </Typography>\n                  \n                </Modal.Header>\n                <Modal.Body>\n\n                    <Form.Group controlId='teamSize'>\n                        <Typography variant=\"h5\" component=\"h5\">\n                        Team Size\n            </Typography>\n                        \n                        <Form.Control type='number' placeholder='0' value={teamSize} onChange={(e) => setTeamSize(e.target.value)} />\n                    </Form.Group>\n                    {[...Array(Number(teamSize))].map((e, index) => (<div key={uuid()}>\n                      \n                        <Typography variant=\"h6\" component=\"h6\">\n                        Team {index + 1}\n            </Typography>\n                        \n                        {\n                            [...Array(Math.floor(Number(workersArray.length) / Number(teamSize)))].map((e, index1) => (\n                                <Form.Control key={uuid()} className='rtl' as='select' defaultValue={'בחר עובד'} onChange={(e) => updateMutableWorkersArray(e, index, index1)} >\n                                    <option value={'בחר עובד'} onChange={(e) => updateMutableWorkersArray(e, index)}>{'בחר עובד'} </option>\n                                    {mutableWorkersArray.map((worker) => <option key={worker} value={worker} >{worker} </option>)}\n                                </Form.Control>\n                            ))\n                        }\n                    </div>\n                    ))}\n                </Modal.Body>\n                <Modal.Footer>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleClose}>\n                Close\n                    </Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={saveTeams}>\n                Close\n                    </Button>   \n                 \n                </Modal.Footer>\n            </Modal>\n\n            <ListGroup className='color-dark' >\n                <ListGroup.Item variant=\"success\">הגישו משמרות</ListGroup.Item>\n                {(users && submittedShiftsByDate) &&\n                    submittedShiftsByDate.options[0][1].map(worker =>\n                        <ListGroup.Item key={uuid()}>{worker[0]}</ListGroup.Item>)\n                }\n                <ListGroup.Item variant='danger'>לא הגישו משמרות</ListGroup.Item>\n                {(users && submittedShiftsByDate) &&\n                    users.map(user => submittedShiftsByDate.submitted.findIndex(worker => worker === user.name) > -1 ? null : <ListGroup.Item key={uuid()}>{user.name}</ListGroup.Item>\n                    )}\n            </ListGroup>\n        </>\n    )\n}\n\nexport default TeamMaker\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\workerTeamsConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\workerTeamsReducer.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ShiftsMaker.js",["200","201"],"import React, { useState, useEffect } from 'react'\nimport { Table, Row, Modal, Form, DropdownButton, Dropdown, Spinner } from 'react-bootstrap'\nimport { useSelector, useDispatch } from 'react-redux';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport uuid from 'react-uuid'\nimport { updateDateDaysAction, getDateDaysAction } from '../actions/dateDaysActions';\nimport { postScheduleAction, updateScheduleAction, postTemporaryScheduleAction, updateTemporaryScheduleAction } from '../actions/scheduleActions';\nimport DemoAlert from '../components/DemoAlert.js';\nimport { Button, Typography, TextField } from '@material-ui/core';\n\nimport { UPDATE_TEMP_SHIFTS_ARRAY } from '../constants/scheduleConstants';\nimport { DisableSubmittingButton } from './DisableSubmittingButton';\n\nconst ShiftsMaker = () => {\n    const dispatch = useDispatch()\n    const [show, setShow] = useState(false);\n    const [showDemoAlert, setShowDemoAlert] = useState(false)\n\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n    const updateSchedule = useSelector(state => state.updateSchedule);\n    const { loading: loadingUpdateSchedule } = updateSchedule;\n\n    const postTemporarySchedule = useSelector(state => state.postTemporarySchedule);\n    const { loading: loadingPostTemporarySchedule } = postTemporarySchedule;\n\n    const updateTemporarySchedule = useSelector(state => state.updateTemporarySchedule);\n    const { loading: loadingUpdateTemporarySchedule } = updateTemporarySchedule;\n\n    const getAllSubmittedShiftsByDate = useSelector(state => state.getAllSubmittedShiftsByDate)\n    const { submittedShiftsByDate } = getAllSubmittedShiftsByDate\n\n    const [startDate, setStartDate] = useState(new Date());\n    const [daysAmount, setDaysAmount] = useState(0);\n\n    const shiftsDateDays = useSelector(state => state.shiftsDateDays)\n    const { date: dateState, daysAmount: daysAmountState } = shiftsDateDays\n\n    const getInProgressSchedule = useSelector(state => state.getInProgressSchedule)\n    const { schedule } = getInProgressSchedule\n\n\n\n\n    const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת']\n\n\n    const [shifts, setShifts] = useState([])\n    const [disableSaveButton, setDisableSaveButton] = useState(false)\n\n    const setWorker = (worker, day, shift, index) => {\n        let tempShifts = [...shifts]\n        worker !== 'worker' ? tempShifts[day][shift][index] = worker : tempShifts[day][shift][index] = ''\n        setShifts(tempShifts)\n        dispatch({ type: UPDATE_TEMP_SHIFTS_ARRAY, payload: tempShifts })\n\n\n    }\n\n    const setDay = (dayNumber) => {\n        const dayWord = new Date(Number(dateState.getFullYear()), Number(dateState.getMonth()), Number(dayNumber)).getDay()\n        return days[dayWord]\n    }\n\n    const setOptions = (day, secondWorker, shift, shiftKey) => {\n        let options = []\n        submittedShiftsByDate.options[day][1].map((workerOption, index) => (\n            submittedShiftsByDate.options[day][1][index][1].includes(shift) || submittedShiftsByDate.options[day][1][index][1] === 'הכול' ?\n                options.push(submittedShiftsByDate.options[day][1][index][0]) : null)\n        )\n        if (shifts[day][shiftKey][secondWorker]) {\n            options = options.filter(worker => worker !== shifts[day][shiftKey][secondWorker])\n        }\n\n        if (day > 0) {\n            if (shiftKey === 'morning') {\n                shifts[day - 1].evening.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n                shifts[day].afternoon.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n            }\n            if (shiftKey === 'afternoon') {\n                shifts[day].morning.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n                shifts[day].evening.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n            }\n            if (shiftKey === 'evening') {\n                shifts[day].afternoon.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n                if (day < shifts.length - 1) shifts[day + 1].morning.map(worker => options = options.filter(workerFilter => workerFilter !== worker))\n            }\n        }\n        return options\n    }\n\n    const setOptionsTraining = () => {\n        let options = []\n        for (let i = 0; i < submittedShiftsByDate.options[0][1].length; i++) {\n            options.push(submittedShiftsByDate.options[0][1][i][0])\n        }\n        return options\n    }\n\n    const trainingsHandler = (worker, day) => {\n        let tempShifts = [...shifts]\n        tempShifts[day].trainings.findIndex(workerArray => workerArray === worker) > -1 ?\n            tempShifts[day].trainings.splice(tempShifts[day].trainings.findIndex(workerArray => workerArray === worker), 1)\n            : tempShifts[day].trainings.push(worker)\n        setShifts(tempShifts)\n        dispatch({ type: UPDATE_TEMP_SHIFTS_ARRAY, payload: tempShifts })\n\n    }\n\n    const sumbitForm = (e) => {\n        if (userInfo.name === 'demo') {\n            setShowDemoAlert(true)\n            setTimeout(() => { setShowDemoAlert(false); setShow(false) }, 5000)\n            return\n        }\n        e.preventDefault()\n        dispatch(updateDateDaysAction({ startDate, daysAmount }))\n        handleClose()\n    }\n\n\n    useEffect(() => {\n        if (schedule && schedule.done) {\n            setDisableSaveButton(true)\n\n        }\n        if (schedule && schedule.shifts) {\n            setShifts(schedule.shifts)\n\n\n        } else {\n            let shiftsArray = []\n            for (let i = 0; i < daysAmountState; i++) {\n                shiftsArray.push({\n                    morning: [],\n                    afternoon: [],\n                    evening: [],\n                    trainings: []\n                })\n            }\n            setShifts(shiftsArray)\n        }\n        if (!daysAmountState) {\n            dispatch(getDateDaysAction())\n        }\n    }, [dispatch, daysAmountState, shifts.length, dateState, schedule])\n\n    const postDoneSchedule = () => {\n        if (userInfo.name === 'demo') {\n            setShowDemoAlert(true)\n            setTimeout(() => setShowDemoAlert(false), 5000)\n            return\n        }\n        if (!schedule || !schedule._id) {\n            dispatch(postScheduleAction({ shifts, dateState }))\n            setDisableSaveButton(true)\n        } else {\n            setDisableSaveButton(true)\n            dispatch(updateScheduleAction(shifts, schedule._id))\n        }\n    }\n\n    const postUpdateTemporarySchedule = () => {\n        if (userInfo.name === 'demo') {\n            setShowDemoAlert(true)\n            setTimeout(() => setShowDemoAlert(false), 5000)\n            return\n        }\n        if (!schedule) {\n            dispatch(postTemporaryScheduleAction({ shifts, dateState }))\n        } else {\n            dispatch(updateTemporaryScheduleAction(shifts, dateState))\n        }\n\n    }\n\n    return (\n        <>\n            {showDemoAlert && <DemoAlert />}\n\n            <Row style={{ 'direction': 'rtl' }}>\n                <Button variant=\"success\" className=\"my-3\" onClick={handleShow}>\n                    עדכן ימים ותאריך להכנת סידור עבודה\n                 </Button>\n\n                <Modal className='right rtl' show={show} onHide={handleClose}>\n                    <Modal.Header >\n                        <Modal.Title>עדכן בקשה להגשת משמרות </Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form>\n                            <Form.Group controlId='startDate'>\n                                <Form.Label>בחר תאריך</Form.Label>\n                                <Form.Control type='date'\n                                    className='right rtl'\n                                    value={startDate} onChange={(e) => setStartDate(e.target.value)}>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId='daysAmount'>\n                                <Form.Label>בחר כמות ימים</Form.Label>\n                                <Form.Control type='number'\n\n                                    value={daysAmount} onChange={(e) => setDaysAmount(e.target.value)}>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form>\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            סגור\n                    </Button>\n                        <Button variant=\"primary\" onClick={(e) => sumbitForm(e)}>\n                            הגש\n                    </Button>\n                    </Modal.Footer>\n                </Modal>\n                {daysAmountState && <h4 className='my-3 mr-3 align-self'>הכנת סידור עבודה לתאריכים&nbsp;\n                    {`${new Date(dateState).getDate()}/${new Date(dateState).getMonth() + 1}`} - {`${new Date(dateState).getDate() + daysAmountState - 1}/${new Date(dateState).getMonth() + 1}`}\n                </h4>}\n            </Row>\n            <DisableSubmittingButton />\n            {dateState && <Table striped bordered hover responsive variant={isDark ? 'dark' : 'light'} className='table-sm'>\n                <thead>\n                    <tr>\n                        <th>רענון</th>\n                        <th>משמרת לילה 22:00-6:00</th>\n                        <th>משמרת צהריים 14:00-22:00</th>\n                        <th>משמרת בוקר 06:00-14:00:00</th>\n                        <th>תאריך</th>\n                        <th>יום בשבוע</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td className='shiftTD'>\n                            <p>אחמ\"ש</p>\n                            <p>מאבטח 2</p>\n                        </td>\n                        <td className='shiftTD'>\n                            <p>אחמ\"ש</p>\n                            <p>מאבטח 2</p>\n                        </td>\n                        <td className='shiftTD'>\n                            <p>אחמ\"ש</p>\n                            <p>מאבטח 2</p>\n                        </td>\n                        <td></td>\n                        <td></td>\n                    </tr>\n                    {submittedShiftsByDate && shifts.length > 0 &&\n                        submittedShiftsByDate.options.map((option, index) => (\n\n                            <tr key={uuid()}>\n                                <td>\n\n                                    <DropdownButton id=\"dropdown-basic-button\" title=\"בחר עובדים \">\n                                        {setOptionsTraining().map((worker) => (\n                                            <Dropdown.Item key={'checkbox' + index + worker}>\n                                                <p className='py-1 center'\n                                                    style={{ 'backgroundColor': shifts[index].trainings.findIndex(workerArray => workerArray === worker) > -1 ? 'green' : null }}\n                                                    onClick={(e) => { trainingsHandler(worker, index) }}>{worker}</p>\n                                            </Dropdown.Item>\n                                        ))}\n                                    </DropdownButton>\n                                </td>\n                                <td className='shiftTD'>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].evening[0] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'evening', 0)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 1, 'לילה', 'evening').map((worker) => <option key={'evening' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].evening[1] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'evening', 1)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 0, 'לילה', 'evening').map((worker) => <option key={index + 'evening' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                </td>\n                                <td className='shiftTD'>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].afternoon[0] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'afternoon', 0)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 1, 'צהריים', 'afternoon').map((worker) => <option key={'afternoon' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].afternoon[1] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'afternoon', 1)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 0, 'צהריים', 'afternoon').map((worker) => <option key={index + 'afternoon' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                </td>\n                                <td className='shiftTD'>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].morning[0] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'morning', 0)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 1, 'בוקר', 'morning').map((worker) => <option key={'morning' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                    <Form.Control className='rtl' as='select' defaultValue={shifts[index].morning[1] || 'worker'} onChange={(e) => setWorker(e.target.value, index, 'morning', 1)}>\n                                        <option value={'worker'}>בחר עובד </option>\n                                        {setOptions(index, 0, 'בוקר', 'morning').map((worker) => <option key={index + 'morning' + worker} value={worker}>{worker} </option>)}\n                                    </Form.Control>\n                                </td>\n                                <th>{`${new Date(dateState).getDate() + index}/${new Date(dateState).getMonth() + 1}`}</th>\n                                <th>{setDay(index + 1)}</th>\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </Table>\n            }\n\n\n            <Button variant=\"contained\" color=\"primary\" onClick={postDoneSchedule} disabled={disableSaveButton}>\n                שלח סידור חדש\n                    </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={postUpdateTemporarySchedule} disabled={disableSaveButton}>\n                שמור סידור\n                    </Button>\n\n            {(loadingUpdateSchedule || loadingPostTemporarySchedule || loadingUpdateTemporarySchedule) ? <div className='spinner'><Spinner className='align-self' animation=\"border\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </Spinner></div> : null}\n        </>\n\n    )\n}\n\nexport default ShiftsMaker\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\dateDaysReducers.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\dateDaysConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\dateDaysActions.js",["202"],"import {\r\n    UPDATE_DATE_DAYS_REQUEST, UPDATE_DATE_DAYS_SUCCESS, UPDATE_DATE_DAYS_FAIL,\r\n    GET_DATE_DAYS_REQUEST, GET_DATE_DAYS_SUCCESS, GET_DATE_DAYS_FAIL, UPDATE_SUBMITTING_STATUS_DATE_DAYS_REQUEST\r\n} from '../constants/dateDaysConstants.js'\r\nimport axios from 'axios';\r\nimport { getAllSubmittedShiftsByDateAction, getOneSubmittedShiftsByDateAction } from './submitShiftsActions.js'\r\nimport { getInProgressScheduleAction } from './scheduleActions.js';\r\n\r\n\r\nexport const updateDateDaysAction = (dateDays) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: UPDATE_DATE_DAYS_REQUEST })\r\n        const { userLogin: { userInfo } } = getState()\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(`/api/dateDays`, dateDays, config)\r\n        dispatch({ type: UPDATE_DATE_DAYS_SUCCESS, payload: data })\r\n        dispatch({ type: GET_DATE_DAYS_SUCCESS, payload: data })\r\n        if (userInfo.isAdmin) {\r\n            dispatch(getAllSubmittedShiftsByDateAction(data.date))\r\n            dispatch(getInProgressScheduleAction(data.date,data.daysAmount)) \r\n        }\r\n        if (userInfo.name) { \r\n            dispatch(getOneSubmittedShiftsByDateAction(data.date))\r\n\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_DATE_DAYS_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.response\r\n        })\r\n    }\r\n}\r\n\r\nexport const getDateDaysAction = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({ type: GET_DATE_DAYS_REQUEST })\r\n        const { userLogin: { userInfo } } = getState()\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n        const { data } = await axios.get('/api/datedays', config)\r\n        dispatch({ type: GET_DATE_DAYS_SUCCESS, payload: data })\r\n        if (userInfo.isAdmin) {\r\n            dispatch(getAllSubmittedShiftsByDateAction(data.date))\r\n            dispatch(getInProgressScheduleAction(data.date,data.daysAmount)) \r\n        }\r\n        if (userInfo.name) { \r\n            dispatch(getOneSubmittedShiftsByDateAction(data.date))\r\n\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: GET_DATE_DAYS_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.response\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateSubmittingStatus = (disable,id) => async (dispatch, getState) => {\r\n    try {\r\n        console.log(disable);\r\n        const { userLogin: { userInfo } } = getState()\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(`/api/datedays/${id}`, {disable}, config)\r\n        dispatch({ type: UPDATE_DATE_DAYS_SUCCESS, payload: data })\r\n        dispatch({ type: GET_DATE_DAYS_SUCCESS, payload: data })\r\n        console.log(data);\r\n        if (userInfo.isAdmin) {\r\n            dispatch(getAllSubmittedShiftsByDateAction(data.date))\r\n            dispatch(getInProgressScheduleAction(data.date,data.daysAmount)) \r\n        }\r\n        if (userInfo.name) { \r\n            dispatch(getOneSubmittedShiftsByDateAction(data.date))\r\n\r\n        }\r\n    } catch (error) {\r\n        dispatch({\r\n            type: UPDATE_DATE_DAYS_FAIL,\r\n            payload: error.response && error.response.data.message ?\r\n                error.response.data.message : error.response\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\actions\\scheduleActions.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\scheduleConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\scheduleReducers.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ShiftsCount.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Paginate.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\Sidebar.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\UserEditScreen.js",["203","204"],"import React, { useEffect, useState } from 'react';\nimport { Table} from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport { listUsers, deleteUser } from '../actions/userActions';\nimport NewUserForm from '../components/NewUserForm.js';\nimport DemoAlert from '../components/DemoAlert.js';\nimport {Button,Typography,TextField} from '@material-ui/core';\n\nconst UserEditScreen = ({ history }) => {\n\n    const dispatch = useDispatch()\n\n    const [editUser, setEditUser] = useState('')\n    const [showDemoAlert, setShowDemoAlert] = useState(false)\n\n    const userList = useSelector(state => state.userList)\n    const { loading, error, users } = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    const userRegister = useSelector(state => state.userRegister)\n    const { success: successRegister } = userRegister\n\n    const userDelete = useSelector(state => state.userDelete)\n    const { success: successDelete } = userDelete\n\n    const userUpdate = useSelector(state => state.userUpdate);\n    const { success: successUpdate } = userUpdate;\n\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n\n    useEffect(() => {\n        setEditUser('')\n        if (userInfo && userInfo.isAdmin) {\n            dispatch(listUsers())\n        } else {\n            history.push('/login')\n        }\n\n    }, [dispatch, history, userInfo, successUpdate, successDelete, successRegister])\n\n    const deleteHandler = (id) => {\n        if(userInfo.name ==='demo'){\n            setShowDemoAlert(true)\n            setTimeout(()=>setShowDemoAlert(false),5000)\n            return\n        }\n        if (window.confirm('Are you sure ')) {\n            dispatch(deleteUser(id))\n        }\n    }\n\n    return (\n        <>\n        {showDemoAlert && <DemoAlert/>}\n            <Typography className='user-form-header' variant=\"h3\" component=\"h2\">\n                משתמשים\n            </Typography>\n            <NewUserForm editUser={editUser} />\n            {\n                (loading && users) ? <Loader /> : error ? <Message variant='danger'>{error}</Message> : (\n                    <Table className='right' striped bordered hover variant={isDark?'dark':'light'} responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th  style={{fontFamily:'sans-serif',fontSize:\"30px\"}}></th>\n                                <th  style={{fontFamily:'sans-serif',fontSize:\"30px\"}}>מנהל</th>\n                                <th style={{fontFamily:'sans-serif',fontSize:\"30px\"}}>מייל</th>\n                                <th  style={{fontFamily:'sans-serif',fontSize:\"30px\"}}>שם</th>\n                                <th  style={{fontFamily:'sans-serif',fontSize:\"30px\"}}>.מס</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {users && users.map(user => (\n                                <tr key={user._id}> \n                                    <td>\n                                        <Button variant='light' className='btn-sm' onClick={() => setEditUser(editUser === user._id ? '' : user._id)}>\n                                            <i className='fas fa-edit'></i>\n                                        </Button>\n                                        <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                            <i className='fas fa-trash'></i> \n                                        </Button>\n                                    </td>\n                                    \n                                    <td>{user.isAdmin ?\n                                        (<i className='fas fa-check' style={{ color: 'green' }}></i>) :\n                                        (<i className='fas fa-times' style={{ color: 'red' }}></i>)}\n                                    </td>\n                                    <td><a href={`mailto:${user.email}`}>{user.email}</a></td>\n\n                                    <td>{user.name}</td>\n                                    <td onClick={() => console.log(user._id)}>{users.findIndex(findUser => findUser.name === user.name) + 1}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n\n                )\n            }\n        </>\n    )\n}\n\nexport default UserEditScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\newUserForm.js",["205","206","207","208","209","210","211","212","213","214"],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\NewUserForm.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\screens\\MyShiftsScreen.js",["215","216","217","218","219","220","221"],"import React, { useEffect } from 'react'\nimport { Table, Form, Alert, Row } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux';\nimport uuid from 'react-uuid'\nimport { Link } from 'react-router-dom';\nimport { getAllSchedulesAction } from '../actions/scheduleActions';\nimport { Button, Typography, TextField } from '@material-ui/core';\n\nconst MyShiftsScreen = ({ history }) => {\n\n    const userLogin = useSelector(state => state.userLogin);\n    const { userInfo } = userLogin;\n    const dispatch = useDispatch()\n    const getSchedules = useSelector(state => state.getSchedules);\n    const { schedules, pages, page } = getSchedules;\n    const days = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת']\n\n    const setDay = (dayNumber) => {\n        if (schedules[0]) {\n            const dayWord = new Date(Number(new Date(schedules[0].date).getFullYear()), Number(new Date(schedules[0].date).getMonth()), Number(dayNumber)).getDay()\n            return days[dayWord]\n        } else return null\n    }\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/')\n        } else if (!schedules) {\n            dispatch(getAllSchedulesAction(0))\n        }\n    }, [dispatch, userInfo])\n\n    const checkShift = (day) => {\n        const shifts = Object.keys(day).map(tempShift => (day[tempShift][0] === userInfo.name || day[tempShift][1] === userInfo.name ? tempShift : null))\n        let shift = shifts.filter(tempShift => tempShift !== null)[0]\n        let secondShift = shifts.filter(tempShift => (tempShift !== null && tempShift !== shift))[0]\n        if (shift) {\n            if (secondShift) {\n                secondShift = secondShift === 'evening' ? 'ערב' : secondShift === 'morning' ? 'בוקר' : 'צהריים'\n            }\n            shift = shift === 'evening' ? 'ערב' : shift === 'morning' ? 'בוקר' : 'צהריים'\n        }\n        return shift ? `${shift ? shift : ''} ${secondShift ? ',' + secondShift : ''}` : 'אין משמרת'\n    }\n\n\n\n    const exportPDF = () => {\n        if (!schedules) {\n            return\n        }\n        window.print()\n    }\n\n    return (\n        <>\n            <Row style={{ 'direction': 'rtl' }}>\n                <Link\n                    className={'btn btn-primary my-3'}\n                    to='/'>\n                    דף הבית\n                 </Link>\n\n            </Row>\n            <Table className=\"right\" striped bordered hover responsive size=\"sm\" variant={isDark ? 'dark' : 'light'}\n            >\n                <thead>\n                    <tr>\n\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"30px\" }}>משמרת</th>\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"30px\" }}>יום</th>\n                        <th style={{ fontFamily: 'sans-serif', fontSize: \"30px\" }}>תאריך</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {(schedules && userInfo.name) &&\n                        schedules[0].shifts.map((day, index) => (\n                            <tr key={uuid()}>\n                                <td>\n                                    {checkShift(day)}\n                                </td>\n                                <td className={\n                                    setDay(new Date(schedules[0].date).getDate() + index) === 'שישי' || setDay(new Date(schedules[0].date).getDate() + index) === 'שבת' ?\n                                        isDark ? 'green' : 'light-green' : ''\n                                }>{setDay(new Date(schedules[0].date).getDate() + index)}</td>\n                                <td>{`${new Date(schedules[0].date).getDate() + index}/${new Date(schedules[0].date).getMonth() + 1}/${new Date(schedules[0].date).getFullYear()}`}</td>\n\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </Table>\n            <Button onClick={exportPDF} variant=\"contained\" color=\"primary\">הורד משמרות </Button>\n        </>\n    )\n}\n\nexport default MyShiftsScreen\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\DemoAlert.js",["222","223"],"import React from 'react'\nimport {Button,Typography,TextField} from '@material-ui/core';\nconst DemoAlert = () => {\n    return (\n        <div className='full-screen'>\n        <div className='center-screen'>\n        <Typography variant=\"h3\" component=\"h2\">\n        this is a demo user no actions are allowd\n            </Typography>\n            <Typography variant=\"h5\" component=\"h6\">\n            5... 4... 3...\n            </Typography>\n           \n        </div>\n        </div>\n    )\n}\n\nexport default DemoAlert\n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\ThemeModeButton.js",["224"],"import React, { useState, useEffect } from 'react'\nimport { UPDATE_THEME_COLORS } from '../constants/themeConstants'\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ThemeModeButton = () => {\n\n    const dispatch = useDispatch()\n\n    const theme = useSelector(state => state.theme);\n    const { isDark } = theme;\n\n    const toggleTheme = () => {\n        dispatch({type:UPDATE_THEME_COLORS, payload:!isDark})\n    }\n\n    \n    useEffect(() => {\n    }, [dispatch, isDark])\n\n\n    return (\n        <div className='theme_toggle_container' onClick={toggleTheme}> \n            <i className='sun-icon fas fa-sun '></i>\n            <i className='moon-icon fas fa-moon '></i>\n            <div className={isDark ? 'theme_toggle_button toggle_theme_button' : 'theme_toggle_button'} ></div>\n        </div>\n    )\n}\n\nexport default ThemeModeButton \n","C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\reducers\\themeReducers.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\constants\\themeConstants.js",[],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\DisableSubmittingButton.js",["225","226","227"],"import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form } from 'react-bootstrap'\nimport { updateSubmittingStatus } from '../actions/dateDaysActions';\n\n\nexport const DisableSubmittingButton = () => {\n    const dispatch = useDispatch()\n\n    const shiftsDateDays = useSelector(state => state.shiftsDateDays)\n    const { date: dateState, daysAmount: daysAmountState, disableSubmitting, id } = shiftsDateDays\n\n\n\n    const submitForm = (checked) => {\n        dispatch(updateSubmittingStatus(checked, id))\n    }\n\n    return (\n        <>\n            <Form.Check\n                type=\"checkbox\"\n                className=\"right\"\n                id=\"inlineFormCheck\"\n                label=\"בטל אפשרות להגשת משמרות\"\n                checked={disableSubmitting} onChange={(e) => submitForm(e.target.checked)}\n            />\n        </>\n    )\n}\n",["228","229"],"C:\\Users\\Alex Shvetsov\\Desktop\\Limodim\\work schedule\\fronted\\src\\components\\AllOptions.js",["230"],"import React from 'react'\nimport {Table} from 'react-bootstrap'\nimport {useSelector} from 'react-redux'\nimport uuid from 'react-uuid'\nexport const AllOptions = () => {\n    const getAllSubmittedShiftsByDate = useSelector(state => state.getAllSubmittedShiftsByDate)\n    const { submittedShiftsByDate } = getAllSubmittedShiftsByDate\n    return (\n        \n            <table className='options-table'>\n                <thead >\n                    <tr>\n                  {submittedShiftsByDate && submittedShiftsByDate.options[0][1].map(name=><th key={name[0]}>{name[0].split(' ')[0]}</th>)}\n                        <th>תאריך</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {submittedShiftsByDate && submittedShiftsByDate.options.map((option, index)=><tr key={uuid()}>\n                        {option[1].map(person=><td key={person[0].split(' ')[0]}>{person[1]}</td>)}<th>{option[0]}</th></tr>)}\n                </tbody>\n            </table>\n        \n    )\n} \n",{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","severity":1,"message":"236","line":2,"column":10,"nodeType":"237","messageId":"238","endLine":2,"endColumn":14},{"ruleId":"235","severity":1,"message":"239","line":3,"column":16,"nodeType":"237","messageId":"238","endLine":3,"endColumn":19},{"ruleId":"235","severity":1,"message":"240","line":3,"column":21,"nodeType":"237","messageId":"238","endLine":3,"endColumn":24},{"ruleId":"241","severity":1,"message":"242","line":41,"column":17,"nodeType":"243","endLine":41,"endColumn":21},{"ruleId":"235","severity":1,"message":"240","line":3,"column":22,"nodeType":"237","messageId":"238","endLine":3,"endColumn":25},{"ruleId":"235","severity":1,"message":"244","line":9,"column":16,"nodeType":"237","messageId":"238","endLine":9,"endColumn":26},{"ruleId":"235","severity":1,"message":"245","line":9,"column":27,"nodeType":"237","messageId":"238","endLine":9,"endColumn":36},{"ruleId":"246","severity":1,"message":"247","line":30,"column":25,"nodeType":"243","endLine":30,"endColumn":75},{"ruleId":"235","severity":1,"message":"248","line":16,"column":11,"nodeType":"237","messageId":"238","endLine":16,"endColumn":16},{"ruleId":"235","severity":1,"message":"249","line":17,"column":11,"nodeType":"237","messageId":"238","endLine":17,"endColumn":15},{"ruleId":"235","severity":1,"message":"245","line":8,"column":30,"nodeType":"237","messageId":"238","endLine":8,"endColumn":39},{"ruleId":"235","severity":1,"message":"245","line":7,"column":27,"nodeType":"237","messageId":"238","endLine":7,"endColumn":36},{"ruleId":"235","severity":1,"message":"244","line":9,"column":18,"nodeType":"237","messageId":"238","endLine":9,"endColumn":28},{"ruleId":"235","severity":1,"message":"245","line":9,"column":30,"nodeType":"237","messageId":"238","endLine":9,"endColumn":39},{"ruleId":"235","severity":1,"message":"250","line":3,"column":71,"nodeType":"237","messageId":"238","endLine":3,"endColumn":113},{"ruleId":"235","severity":1,"message":"245","line":9,"column":27,"nodeType":"237","messageId":"238","endLine":9,"endColumn":36},{"ruleId":"251","severity":1,"message":"252","line":68,"column":112,"nodeType":"253","endLine":68,"endColumn":132},{"ruleId":"235","severity":1,"message":"254","line":1,"column":17,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"235","severity":1,"message":"255","line":1,"column":27,"nodeType":"237","messageId":"238","endLine":1,"endColumn":36},{"ruleId":"235","severity":1,"message":"236","line":2,"column":10,"nodeType":"237","messageId":"238","endLine":2,"endColumn":14},{"ruleId":"235","severity":1,"message":"256","line":4,"column":10,"nodeType":"237","messageId":"238","endLine":4,"endColumn":21},{"ruleId":"235","severity":1,"message":"257","line":4,"column":23,"nodeType":"237","messageId":"238","endLine":4,"endColumn":34},{"ruleId":"235","severity":1,"message":"258","line":5,"column":8,"nodeType":"237","messageId":"238","endLine":5,"endColumn":15},{"ruleId":"235","severity":1,"message":"259","line":6,"column":8,"nodeType":"237","messageId":"238","endLine":6,"endColumn":14},{"ruleId":"235","severity":1,"message":"260","line":7,"column":10,"nodeType":"237","messageId":"238","endLine":7,"endColumn":24},{"ruleId":"235","severity":1,"message":"261","line":7,"column":26,"nodeType":"237","messageId":"238","endLine":7,"endColumn":36},{"ruleId":"235","severity":1,"message":"262","line":8,"column":10,"nodeType":"237","messageId":"238","endLine":8,"endColumn":27},{"ruleId":"235","severity":1,"message":"263","line":2,"column":17,"nodeType":"237","messageId":"238","endLine":2,"endColumn":21},{"ruleId":"235","severity":1,"message":"264","line":2,"column":23,"nodeType":"237","messageId":"238","endLine":2,"endColumn":28},{"ruleId":"235","severity":1,"message":"244","line":7,"column":18,"nodeType":"237","messageId":"238","endLine":7,"endColumn":28},{"ruleId":"235","severity":1,"message":"245","line":7,"column":30,"nodeType":"237","messageId":"238","endLine":7,"endColumn":39},{"ruleId":"235","severity":1,"message":"265","line":15,"column":24,"nodeType":"237","messageId":"238","endLine":15,"endColumn":29},{"ruleId":"235","severity":1,"message":"266","line":15,"column":31,"nodeType":"237","messageId":"238","endLine":15,"endColumn":35},{"ruleId":"267","severity":1,"message":"268","line":34,"column":8,"nodeType":"269","endLine":34,"endColumn":28,"suggestions":"270"},{"ruleId":"235","severity":1,"message":"271","line":2,"column":9,"nodeType":"237","messageId":"238","endLine":2,"endColumn":15},{"ruleId":"235","severity":1,"message":"245","line":2,"column":27,"nodeType":"237","messageId":"238","endLine":2,"endColumn":36},{"ruleId":"235","severity":1,"message":"254","line":1,"column":17,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"235","severity":1,"message":"254","line":1,"column":17,"nodeType":"237","messageId":"238","endLine":1,"endColumn":25},{"ruleId":"235","severity":1,"message":"272","line":11,"column":19,"nodeType":"237","messageId":"238","endLine":11,"endColumn":28},{"ruleId":"235","severity":1,"message":"273","line":11,"column":42,"nodeType":"237","messageId":"238","endLine":11,"endColumn":57},{"ruleId":"231","replacedBy":"274"},{"ruleId":"233","replacedBy":"275"},{"ruleId":"235","severity":1,"message":"276","line":2,"column":9,"nodeType":"237","messageId":"238","endLine":2,"endColumn":14},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'Typography' is defined but never used.","'TextField' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'month' is assigned a value but never used.","'year' is assigned a value but never used.","'UPDATE_SUBMITTING_STATUS_DATE_DAYS_REQUEST' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'Message' is defined but never used.","'Loader' is defined but never used.","'getUserDetails' is defined but never used.","'updateUser' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'Form' is defined but never used.","'Alert' is defined but never used.","'pages' is assigned a value but never used.","'page' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'schedules'. Either include them or remove the dependency array.","ArrayExpression",["279"],"'Button' is defined but never used.","'dateState' is assigned a value but never used.","'daysAmountState' is assigned a value but never used.",["277"],["278"],"'Table' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},"Update the dependencies array to be: [dispatch, history, schedules, userInfo]",{"range":"282","text":"283"},[1287,1307],"[dispatch, history, schedules, userInfo]"]